По поводу недостатков ООП можно выделить пару моментов:
1) Размер самой программы. Программа написанная по принципу ООП будет занимать больше простанства на диске чем процедурная. Но это больше наблюдения а не закономерность.
В основном это происходит из-за множества загруженых библиотек. Много методов из подключаемой библиотеки разработчик может не использовать и они просто висят вместе в другим
програмным кодом, влияя на размер готового продукта.
2) Обьектно-ориентированая программа будет работать медленнее чем процедурная, так как нужно выделить время и память под определение екземпляра обьекта к которому собственно нужно обратиться,
также и при наследовании и полиморфизме, нужно определить какой метод выполнять если он переопределен в других классах наследниках. Так же во время выполнения программы она выделяет память под
дескриптор типа для каждого класса, а каждый екземпляр класса имеет укахатель на этот дескриптор.
3) Использовать для задач всех типов ООП не является разумным, так как это не увеличит еффективность , а может даже ухудшит.
4) Можно сказать что обьектно-ориентированый принцип сложен в понимании, так как в жизни его можно встретить очень редко. Приходится изучать фундамент самостоятельно, и для некоторых этот
процесс может быть сложен, особенно для тех кто не имел опыта использования ООП и имеет опыт с процедурными языками.
5) Нужно иметь очень уверенное представление о системе над которой работает программист для предотвращения дублирования кода. Нужно знать что каждый класс может сделать, для чего
он нужен, для чего создавался, проектировался. Также стоит отметить что процесс проетирования классов отнимает много времени перед самим началом разрабтки (хотя и является очень важным
аспектом разработки).
